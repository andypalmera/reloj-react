{"version":3,"sources":["components/Header/Header.js","components/Timer/Timer.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","href","Timer","props","state","labelClass","diasSemana","numeroDiaMes","Date","getDate","numeroMes","getMonth","anio","getFullYear","time","toLocaleTimeString","date","setInterval","setState","this","changeHour","changeMonth","type","value","id","onChange","showDate","for","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qUAkBeA,G,YAfA,WACX,OACI,yBAAKC,UAAU,sCACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,cACX,uBAAGA,UAAU,0CACb,yBAAKA,UAAU,6BAA6BC,KAAK,KAAjD,oBC8GLC,G,kBAnHX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTC,YAAY,EACZC,WAAY,CAAC,QAAS,SAAU,YAAa,SAAU,UAAW,SAAU,WAC5EC,cAAc,IAAIC,MAAOC,UACzBC,WAAW,IAAIF,MAAOG,WAAa,EACnCC,MAAM,IAAIJ,MAAOK,cACjBC,MAAM,IAAIN,MAAOO,qBACjBC,MAAM,GATK,E,0EAYL,IAAD,OACTC,aAAY,WACR,EAAKC,SAAS,CACVJ,MAAM,IAAIN,MAAOO,yBAEtB,O,oCAIH,OAAQI,KAAKf,MAAMM,WACf,KAAK,EACDS,KAAKD,SAAS,CACVR,UAAW,UAEf,MACJ,KAAK,EACDS,KAAKD,SAAS,CACVR,UAAW,YAEf,MACJ,KAAK,EACDS,KAAKD,SAAS,CACVR,UAAW,UAEf,MACJ,KAAK,EACDS,KAAKD,SAAS,CACVR,UAAW,UAEf,MACJ,KAAK,EACDS,KAAKD,SAAS,CACVR,UAAW,SAEf,MACJ,KAAK,EACDS,KAAKD,SAAS,CACVR,UAAW,UAEf,MACJ,KAAK,EACDS,KAAKD,SAAS,CACVR,UAAW,UAEf,MACJ,KAAK,EACDS,KAAKD,SAAS,CACVR,UAAW,WAEf,MACJ,KAAK,EACDS,KAAKD,SAAS,CACVR,UAAW,eAEf,MACJ,KAAK,GACDS,KAAKD,SAAS,CACVR,UAAW,YAEf,MACJ,KAAK,GACDS,KAAKD,SAAS,CACVR,UAAW,cAEf,MACJ,KAAK,GACDS,KAAKD,SAAS,CACVR,UAAW,iB,iCAUvBS,KAAKD,SAAS,CACVb,YAAac,KAAKf,MAAMC,WACxBW,MAAOG,KAAKf,MAAMY,S,+BAIhB,IAAD,OAGL,OAFAC,YAAYE,KAAKC,aAAc,KAC/BD,KAAKE,cAED,yBAAKrB,UAAU,aACX,yBAAKA,UAAU,oBACX,2BAAOsB,KAAK,WAAWC,MAAM,KAAKvB,UAAU,eAAewB,GAAG,SAASC,SAAU,kBAAM,EAAKC,cAC5F,2BAAO1B,WAAqC,IAA1BmB,KAAKf,MAAMC,WAAsB,mBAAqB,kBAAmBsB,IAAI,YAEnG,yBAAK3B,UAAU,mBACX,wBAAIA,UAAU,SAASmB,KAAKf,MAAMU,MAClC,wBAAId,WAA+B,IAApBmB,KAAKf,MAAMY,KAAgB,WAAa,QAClDG,KAAKf,MAAMG,aADhB,OACkCY,KAAKf,MAAMM,UAD7C,OAC4DS,KAAKf,MAAMQ,Y,GA5GvEgB,IAAMC,YCiBXC,E,iLAbP,OACI,yBAAK9B,UAAU,OACX,6BACI,kBAAC,EAAD,MACA,yBAAKA,UAAU,QACX,kBAAC,EAAD,a,GAPN4B,IAAMC,WCOJE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.5e2205c3.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Header.css';\r\n\r\nconst Header = () => {\r\n    return (\r\n        <nav className=\" header navbar navbar-dark bg-dark\">\r\n            <div className=\"container\">\r\n                <div className=\"row m-auto\">\r\n                    <i className=\"fa fa-hand-pointer-o fa-4x text-white\" />\r\n                    <div className=\"h1 ml-2 my-auto text-light\" href=\"/\">\r\n                        React Clock\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    );\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport './Timer.css';\r\n\r\nclass Timer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            labelClass: true,\r\n            diasSemana: ['lunes', 'martes', 'miercoles', 'jueves', 'viernes', 'sabado', 'domingo'],\r\n            numeroDiaMes: new Date().getDate(),\r\n            numeroMes: new Date().getMonth() + 1,\r\n            anio: new Date().getFullYear(),\r\n            time: new Date().toLocaleTimeString(),\r\n            date: true,\r\n        };\r\n    }\r\n    changeHour() {\r\n        setInterval(() => {\r\n            this.setState({\r\n                time: new Date().toLocaleTimeString(),\r\n            });\r\n        }, 1000);\r\n    }\r\n\r\n    changeMonth() {\r\n        switch (this.state.numeroMes) {\r\n            case 1:\r\n                this.setState({\r\n                    numeroMes: 'Enero',\r\n                });\r\n                break;\r\n            case 2:\r\n                this.setState({\r\n                    numeroMes: 'Febrero',\r\n                });\r\n                break;\r\n            case 3:\r\n                this.setState({\r\n                    numeroMes: 'Marzo',\r\n                });\r\n                break;\r\n            case 4:\r\n                this.setState({\r\n                    numeroMes: 'Abril',\r\n                });\r\n                break;\r\n            case 5:\r\n                this.setState({\r\n                    numeroMes: 'Mayo',\r\n                });\r\n                break;\r\n            case 6:\r\n                this.setState({\r\n                    numeroMes: 'Junio',\r\n                });\r\n                break;\r\n            case 7:\r\n                this.setState({\r\n                    numeroMes: 'Julio',\r\n                });\r\n                break;\r\n            case 8:\r\n                this.setState({\r\n                    numeroMes: 'Agosto',\r\n                });\r\n                break;\r\n            case 9:\r\n                this.setState({\r\n                    numeroMes: 'Septiembre',\r\n                });\r\n                break;\r\n            case 10:\r\n                this.setState({\r\n                    numeroMes: 'Octubre',\r\n                });\r\n                break;\r\n            case 11:\r\n                this.setState({\r\n                    numeroMes: 'Noviembre',\r\n                });\r\n                break;\r\n            case 12:\r\n                this.setState({\r\n                    numeroMes: 'Diciembre',\r\n                });\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    showDate() {\r\n        this.setState({\r\n            labelClass: !this.state.labelClass,\r\n            date: !this.state.date,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        setInterval(this.changeHour(), 1000);\r\n        this.changeMonth();\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"button-container\">\r\n                    <input type=\"checkbox\" value=\"on\" className=\"input-switch\" id=\"toggle\" onChange={() => this.showDate()} />\r\n                    <label className={this.state.labelClass === true ? 'label-switch-off' : 'label-switch-on'} for=\"toggle\"></label>\r\n                </div>\r\n                <div className=\"timer-container\">\r\n                    <h2 className=\"timer\">{this.state.time}</h2>\r\n                    <h2 className={this.state.date === true ? 'date-off' : 'date'}>\r\n                        {this.state.numeroDiaMes} de {this.state.numeroMes} de {this.state.anio}\r\n                    </h2>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Timer;\r\n","import React from 'react';\nimport './App.css';\nimport Header from './components/Header/Header';\nimport Timer from './components/Timer/Timer';\n\nclass App extends React.Component {\n    render() {\n        return (\n            <div className=\"App\">\n                <div>\n                    <Header />\n                    <div className=\"mt-5\">\n                        <Timer />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}